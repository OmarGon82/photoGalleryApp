{"version":3,"sources":["Components/Context/index.js","Components/Photo.js","Components/PhotoContainer.js","Components/Nav.js","Components/Search.js","Components/NotFound.js","config.js","App.js","serviceWorker.js","index.js"],"names":["photoLoadingContext","React","createContext","Provider","Consumer","Photo","props","url","farm","server","id","secret","src","alt","PhotoContainer","query","this","match","params","getPhotos","context","photos","results","length","map","photo","key","className","loading","Component","withRouter","Nav","to","onClick","Search","state","searchText","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","path","history","push","currentTarget","reset","onSubmit","type","onChange","name","ref","input","placeholder","required","fill","height","viewBox","width","xmlns","d","NotFound","data-name","href","apiKey","App","axios","get","then","response","data","catch","error","console","log","exact","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.675c4ede.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Context api  variables\r\nconst photoLoadingContext = React.createContext();\r\n\r\n\r\nexport const Provider = photoLoadingContext.Provider;\r\nexport const Consumer = photoLoadingContext.Consumer;\r\n\r\n","import React from 'react';\r\n\r\n/**\r\n * \r\n * @param {*} props receives props from App component\r\n * renders the lis to be nested in the ul\r\n */\r\n\r\nconst Photo = ( props ) => {\r\n    const url = `https://farm${props.farm}.staticflickr.com/${props.server}/${props.id}_${props.secret}.jpg`\r\n    return (\r\n        <li>\r\n            <img src={url}  alt=\"\"/>\r\n           \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Photo;","import React, { Component } from 'react';\r\nimport { Consumer } from './Context'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n//component imports\r\nimport Photo from './Photo';\r\n\r\n\r\nclass PhotoContainer extends Component {\r\n    \r\n    /**\r\n     * uses the match object to the the query string\r\n     * @param {query} the query of the url string.\r\n     */\r\n    componentDidMount() {\r\n        const { match } = this.props;\r\n        const { query } = match.params\r\n        this.props.getPhotos(query);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * method gets data via props and maps it out\r\n     * if there are results it renders the Photo component if not then it shows message\r\n     */\r\n\r\n\r\n    /**\r\n     * renders the UL \r\n     * ternary expression to dynamically displays the type of images displayed default is BJJ\r\n     * ternary expression that checks if the laoding state is true or false and displays a message accordingly\r\n     */\r\n    render() {\r\n    \r\n        return (\r\n\r\n            <Consumer>\r\n                { context => {\r\n                        const results = context.photos;\r\n                        let photos;\r\n                        \r\n                        if (results.length > 0) {\r\n                            photos = results.map(photo => \r\n                                <Photo\r\n                                {...photo}\r\n                                key={photo.id}\r\n                                />\r\n                            );\r\n                        } else {\r\n                        photos = <h3>Sorry. Your search did not return any results. Please try again.</h3>\r\n                        }\r\n                        \r\n                    \r\n                    return (\r\n\r\n                        <div className=\"photo-container\">\r\n                            <h2>Results</h2>\r\n                            { this.props.match.params.query ? <h3> Images of {this.props.match.params.query}</h3> : <h3>Images of BJJ</h3>}\r\n                            <ul>\r\n                                { context.loading ? <h3>Loading...</h3> : photos }          \r\n                            </ul>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(PhotoContainer);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n/**\r\n * \r\n * @param {*} props recieves the getPhotos method from the app component\r\n * renders the nav link buttons \r\n * onClick event calls the getPhotos method \r\n * sets routes for button onClick event\r\n */\r\n\r\nconst Nav = (props) => {\r\n    return (\r\n        <nav className=\"main-nav\">\r\n        \r\n            <ul>\r\n                <li><NavLink to={\"/search/armbar\"} onClick={() => props.getPhotos(\"armbar\")}>Armbar</NavLink></li>\r\n                <li><NavLink to={\"/search/omoplata\"} onClick={() => props.getPhotos(\"omoplata\")}>Omoplata</NavLink></li>\r\n                <li><NavLink to={\"/search/rearnakedchoke\"} onClick={() => props.getPhotos(\"rearnakedchoke\")}>Chokes</NavLink></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n class Search extends Component {\r\n\r\n    /**\r\n     * sets the state to an empty string\r\n     */\r\n    state = {\r\n        searchText: ''\r\n    }\r\n    \r\n    /**\r\n     * sets the state to the input value\r\n     */\r\n    onSearchChange = e => {\r\n        this.setState({ searchText: e.target.value })\r\n    }\r\n    \r\n\r\n    /**\r\n     * method inserts the query value into the string\r\n     * uses the history.push to push a new entry into the history stack\r\n     * @param {e} event\r\n     */\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        let query = this.query.value;\r\n        let path = `/search/${query}`;\r\n        this.props.history.push(path); \r\n        this.props.getPhotos(this.query.value); \r\n        e.currentTarget.reset();       \r\n    }\r\n\r\n    /**\r\n     * Renders the search bar\r\n     * calls the handleSubmit method\r\n     * creates a ref for the input\r\n     */\r\n    render () {\r\n        \r\n        return (\r\n        <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n            <input type=\"search\"\r\n                onChange={this.onSearchChange} \r\n                name=\"search\" \r\n                ref={ (input) => this.query = input }  \r\n                placeholder=\"Search...\" required/>\r\n            <button type=\"submit\" className=\"search-button\">\r\n                <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                </svg>\r\n            </button>\r\n        </form>\r\n     )\r\n  }   \r\n};\r\n\r\nexport default withRouter(Search);","import React from 'react';\r\n\r\n\r\n\r\n/*\r\n * Renders a div to display the not found page. \r\n * Displays the not found svg and an anchor tag to credit the svg author\r\n */\r\n\r\nconst NotFound = () => (\r\n\r\n    <div className=\"main-content not-found\" >\r\n      <h2>Page Not Found</h2>\r\n      <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" className=\"icon-size\">\r\n      <defs>\r\n      <style>.cls-1 fill: #141f38;</style>\r\n      </defs>\r\n      <title>document-denied-outline</title>\r\n      <path className=\"cls-1\" d=\"M128,268.8h76.8a12.8,12.8,0,0,0,0-25.6H128a12.8,12.8,0,0,0,0,25.6Z\"/>\r\n      <path className=\"cls-1\" d=\"M281.6,294.4H128a12.8,12.8,0,0,0,0,25.6H281.6a12.8,12.8,0,0,0,0-25.6Z\"/>\r\n      <path className=\"cls-1\" d=\"M281.22,345.6H128a12.8,12.8,0,0,0,0,25.6H281.22a12.8,12.8,0,0,0,0-25.6Z\"/>\r\n      <path className=\"cls-1\" d=\"M422.4,333.82V153.6L268.94,0H76.8a64,64,0,0,0-64,64V448a64,64,0,0,0,64,64H358.4a63.4,63.4,0,0,0,23.33-4.47A89.54,89.54,0,1,0,422.4,333.82ZM356.24,457.66A63.94,63.94,0,0,1,444.86,369ZM373.09,140.8H320a38.44,38.44,0,0,1-38.4-38.4V49.08ZM76.8,486.4A38.44,38.44,0,0,1,38.4,448V64A38.44,38.44,0,0,1,76.8,25.6H256v76.8a64,64,0,0,0,64,64h76.8V333.82A89.48,89.48,0,0,0,347,486.4Zm332.8,0a63.6,63.6,0,0,1-35.26-10.64L463,387.14A63.94,63.94,0,0,1,409.6,486.4Z\"/>\r\n      </svg>\r\n      <a href='https://dryicons.com/free-icons/404-error'> Icon by Dryicons </a>\r\n    </div>  \r\n  \r\n);\r\n\r\nexport default NotFound;\r\n\r\n","const apiKey = 'a57f0cf592179d93c2612da81a6702e3';\r\n// const secret = 'd559fe7293825945';\r\nexport default apiKey;\r\n","import React, { Component } from 'react';\n// context API import\nimport { Provider } from './Components/Context';\nimport axios from 'axios';\nimport { BrowserRouter, \n         Route,\n         Switch \n} from 'react-router-dom';\n\n\n//compponent imports\nimport PhotoContainer from  './Components/PhotoContainer';\nimport Nav from './Components/Nav';\nimport SearchForm from './Components/Search';\nimport NotFound from './Components/NotFound'\nimport  apiKey  from './config';\n\n\n\nclass  App extends Component {\n\n  /**\n   * Sets the state for this project. \n   */\n  constructor() {\n    super();\n    this.state = {\n      photos: [],\n      loading: true\n    };\n  }\n  \n  /**\n   * fetchs photos from flicker using axios.\n   * @param {value} the string value the url will use to get the initial photos.\n   * returns an error if the promise isn't fulfilled \n   */\n  getPhotos = (query = \"bjj\") => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`\n    )\n    .then(response => {\n        this.setState({\n          photos: response.data.photos.photo,\n          loading: false\n        });\n    })\n    .catch( error => {\n      console.log(\"Error fetching and parsin data\", error);\n    });\n  }\n  \n  \n  render() {\n    return (\n      // passing state with the context api\n      <Provider value={this.state} >\n        <BrowserRouter>\n        <div className=\"container\"> \n        <SearchForm getPhotos={this.getPhotos}  />\n        <Nav getPhotos={this.getPhotos} />\n        <Switch>\n        {/* sets the home route  */}\n            <Route\n              exact path=\"/\" \n              render={ () => <PhotoContainer getPhotos={this.getPhotos}  /> } \n            />\n          {/* sets the route for the search path */}\n              <Route\n              path=\"/search/:query\"\n              render={ () => <PhotoContainer getPhotos={this.getPhotos}  /> }\n              />\n              {/* if no routes match it displays the NotFound page */}\n              <Route component={NotFound} />\n        </Switch>\n        \n        </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}